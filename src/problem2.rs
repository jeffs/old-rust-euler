//! Even Fibonacci numbers
//!
//! > Each new term in the Fibonacci sequence is generated by adding the previous two terms. By
//! > starting with 1 and 2, the first 10 terms will be:
//! >
//! > 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
//! >
//! > By considering the terms in the Fibonacci sequence whose values do not exceed four million,
//! > find the sum of the even-valued terms.

struct FibonacciIter(u32, u32);

impl Iterator for FibonacciIter {
    type Item = u32;

    fn next(&mut self) -> Option<Self::Item> {
        let r = self.0;
        self.0 = self.1;
        self.1 += r;
        Some(r)
    }
}

/// Returns the sum of all even Fibonacci numbers not exceeding 4_000_000.
///
///     assert_eq!(rust_euler::problem2::solution(), 4_613_732);
///
pub fn solution() -> u32 {
    FibonacciIter(1, 2)
        .take_while(|&i| i <= 4_000_000)
        .filter(|&i| i % 2 == 0)
        .sum()
}
